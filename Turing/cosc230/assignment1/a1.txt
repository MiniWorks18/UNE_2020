Q3:

# N refers to new array.
# D refers to double
# 0 refers to empty index location



Arrays					Cost	Given	Left  
N a(D) 				1	3	2
N b(D,D) 				2	3	3
N c(D,D,D,0)				3	3	3
  c(D,D,D,D)				1	3	5
N d(D,D,D,D,D,0,0,0)			5	3	3
  d(D,D,D,D,D,D,0,0)			1	3	5
  d(D,D,D,D,D,D,D,0)			1	3	7
  d(D,D,D,D,D,D,D,D)			1	3	9
N e(D,D,D,D,D,D,D,D,D,0,0,0,0,0,0,0)	9	3	3
  e(D,D,D,D,D,D,D,D,D,D,0,0,0,0,0,0)	1	3	5
  e(D,D,D,D,D,D,D,D,D,D,D,0,0,0,0,0)	1	3	7
  e(D,D,D,D,D,D,D,D,D,D,D,D,0,0,0,0)	1	3	9
  e(D,D,D,D,D,D,D,D,D,D,D,D,D,0,0,0)	1	3	11
  e(D,D,D,D,D,D,D,D,D,D,D,D,D,D,0,0)	1	3	13
  e(D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,0)	1	3	15
  e(D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D)	1	3	17
N f(D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,
    D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) 	17	3	3


Total amortized complexity for inserting n elements = 3n



Q4:

int selectkth(int a[], int k, int n)
{
	int i, j, mini, tmp;
	for (i = 0; i != k; ++i) {		# 1 + k iterations
		mini = i;			# k
		for (j = i+1; j != n; ++j) {	# number of inner iterations
			if (a[j] < a[mini])
				mini = j;	# number of inner iterations
		}
		tmp = a[i];			# k iterations
		a[i] = a[mini];		# k iterations
		a[mini] = tmp;			# k iterations
	}
	return a[k-1];
}


T(a.size)	= 1 + k + k + k + k + k + 2 x number of inner iterations
		= 1 + 5k + 2*(number of inner iterations)


number of inner iterations:
outer:	inner:
i=0	j=i+1 to n-1		-> n-1 iterations
i=1	j=i+1 to n-1		-> n-2 iterations
.	.			.
.	.			.
i=k-3	j=i+1 to n-1		-> 2 iterations
i=k-2	j=i+1 to n-1		-> 1 iteration


Sum_n-1 = (n-1) + (n-2) + ... + 2 + 1
	= 1   +   2 + ... + (n-2) + (n-1)
	= (n(n-1))/2

Therefore the number of inner iterations is (n(n-1))/2


T(a.size)	= 1 + 5k + 2*((n(n-1))/2)
		= 1 + 5k + n(n-1)
		= 1 + 5k + n^2 - n

Therefore the asymptotic complexity = n^2 + 5k - n + 1

