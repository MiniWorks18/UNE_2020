options(digits=3, show.signif.stars = F)
nutrition <- read.table("NutritionStudy.txt", header=TRUE)
source("Rfunctions.R")
View(nutrition)
pairs(nutrition[,c(2,3,4,5)], lower.panel=panel.smooth, upper.panel=panel.cor)
pairs(nutrition[,c(3,4,5,2)], lower.panel=panel.smooth, upper.panel=panel.cor)
pairs(nutrition[,c(2,4,5,3)], lower.panel=panel.smooth, upper.panel=panel.cor)
cor.prob(nutrition)
nutrition_no_id <- nutrition[c(2,3,4,5)]
cor.prob(nutrition_no_id) # Correlation significance
mutli-test2 <- lm(Calories~Age+Fat+Fiber, data=nutriction_no_id)
mutli-test2 <- lm(Calories~Age+Fat+Fiber, data=nutrition_no_id)
mutli_test2 <- lm(Calories~Age+Fat+Fiber, data=nutrition_no_id)
summary(multi_test2)
multi_test2 <- lm(Calories~Age+Fat+Fiber, data=nutrition_no_id)
summary(multi_test2)
View(mutli_test2)
multi_test2 <- lm(Calories~Fat+Fiber+Age, data=nutrition_no_id)
summary(multi_test2)
library(car)
install.packages("car")
library(car)
library(car)
vif(multi_test2)
nutritionEDA <- xyplot(Calories ~ Age|Fat|Fiber,data=nutrition_no_id,layout=c(4,1),
panel=function(x,y){
panel.xyplot(x,y)
panel.lmline(x,y)})
source("Rfunctions.R")
library(lattice)
nutritionEDA <- xyplot(Calories ~ Age|Fat|Fiber,data=nutrition_no_id,layout=c(4,1),
panel=function(x,y){
panel.xyplot(x,y)
panel.lmline(x,y)})
print(nutritionEDA)
nutritionEDA <- xyplot(Calories ~ Age|Fat,data=nutrition_no_id,layout=c(3,1),
panel=function(x,y){
panel.xyplot(x,y)
panel.lmline(x,y)})
print(nutritionEDA)
nutritionEDA <- xyplot(Calories ~ Fiber|Fat,data=nutrition_no_id,layout=c(3,1),
panel=function(x,y){
panel.xyplot(x,y)
panel.lmline(x,y)})
print(nutritionEDA)
mod1 <- lm(Calories~Fiber*Age, data=nutrition_no_id)
anova(mod1)
mod1 <- lm(Calories~Fiber*Age*Fat, data=nutrition_no_id)
mod2 <- lm(Calories~Age+Fiber+Fat, data=nutrition_no_id)
anova(mod1,mod2)
mod3 <- lm(Calories~Age, data=nutrition_no_id)
anova(mod1,mod2)
anova(mod1,mod2,mod3)
mod1 <- lm(Calories~Age*Fat*Fiber, data=nutrition_no_id)
anova(mod1,mod2,mod3)
mod2 <- lm(Calories~Fiber+Fat+Age, data=nutrition_no_id)
anova(mod1,mod2,mod3)
mod3 <- lm(Calories~Fiber, data=nutrition_no_id)
anova(mod1,mod2,mod3)
mod3 <- lm(Calories~Fat, data=nutrition_no_id)
anova(mod1,mod2,mod3)
formL <- formula(~ 1)
formU <- formula(~ Fat + Fiber + Age)
no.model <- lm(Calories ~ 1, data=nutrition_no_id)
fstep.model <- step(no.model, direction = "forward",
scope=list(lower=formL, upper=formU))
formU <- formula(~ Age+ Fat + Fiber)
fstep.model <- step(no.model, direction = "forward",
scope=list(lower=formL, upper=formU))
summary(fstep.model)
options(digits=3, show.signif.stars = F)
summary(fstep.model)
fstep.model <- step(no.model, direction = "forward",
scope=list(lower=formL, upper=formU))
avg(age)
summary(nutrition_no_id)
betaCI(fstep.model)
formU <- formula(~ Age+ Calories + Fiber)
no.model <- lm(Fat ~ 1, data=nutrition_no_id)
summary(fstep.model)
fstep.model <- step(no.model, direction = "forward",
scope=list(lower=formL, upper=formU))
summary(fstep.model)
betaCI(fstep.model)
formU <- formula(~ Age+ Fat + Fiber)
no.model <- lm(Calories ~ 1, data=nutrition_no_id)
fstep.model <- step(no.model, direction = "forward",
scope=list(lower=formL, upper=formU))
betaCI(fstep.model)
options(digits=3, show.signif.stars = F)
source("Rfunctions.R")
sandwich.df <- read.table("sandwich.txt", header=T)
View(sandwich.df)
# Declare Filling as our factor with:
sandwich.df$Filling <- factor(sandwich.df$Filling)
View(sandwich.df)
# Now visualise the data using boxplot.
plot(Ants~Filling, data=sandwich.df)
tapply(Ants, Filling, mean)
tapply(sandwich.df$Ants, sandwich.df$Filling, mean)
tapply(sandwich.df$Ants, sandwich.df$Filling, var)
tapply(sandwich.df$Ants, sandwich.df$Filling, mean)
anova(sandwich.df)
summary(sandwich.df)
summary(sandwich.df$Filling)
summary(sandwich.df$Peanut_Butter)
#Pt2
library(MASS)
boxcox(Filling~Ants, lambda=seq(from=0, to=1, by=0.01))
boxcox(sandwich.df$Filling~Ants, lambda=seq(from=0, to=1, by=0.01))
boxcox(sandwich.df$Ants~Filling, lambda=seq(from=0, to=1, by=0.01))
boxcox(sandwich.df$Ants, lambda=seq(from=0, to=1, by=0.01))
boxcox(Ants, lambda=seq(from=0, to=1, by=0.01), data=sandwich.df)
boxcox(Filling, lambda=seq(from=0, to=1, by=0.01), data=sandwich.df)
boxcox(Ants~Filling, lambda=seq(from=0, to=1, by=0.01), data=sandwich.df)
boxcox(Ants~Filling, lambda=seq(from=-2, to=2, by=0.01), data=sandwich.df)
boxcox(Ants~Filling, lambda=seq(from=-1, to=1.3, by=0.01), data=sandwich.df)
# Question 3
hbf.df <- read.table("bloodflow.txt", header=T)
View(hbf.df)
plot(BF~AOT, data=hbf.df)
lm(BF~AOT, data=hbf.df)
abline(lm(BF~AOT, data=hbf.df))
plot(BF~AOT, data=hbf.df, regLine(BF~AOT))
plot(BF~AOT, data=hbf.df, lm(BF~AOT))
plot(BF~AOT, data=hbf.df)
abline(lm(BF~AOT))
plot(BF~AOT, data=hbf.df)
abline(lm(BF~AOT), data=hbf.df)
abline(lm(BF~AOT, data=hbf.df))
plot(BF~AOT, data=hbf.df)
mod1 <- lm(BF~AOT, data=hbf.df)
abline(mod1, lwd=3, col="red")
mod2 <- lm(BF~poly(AOT, degree=2, raw=T))
attack(hbf.df)
attach(hbf.df)
mod2 <- lm(BF~poly(AOT, degree=2, raw=T))
summary(mod1,mod2)
summary(mod1)
summary(mod2)
lines(smooth.spline(BF, predict(mod2)), col="blue", lwd=3)
lines(smooth.spline(BF, predict(mod2)), col="blue", lwd=3)
lines(smooth.spline(AOT, predict(mod2)), col="blue", lwd=3)
summary(mod3)
lines(smooth.spline(AOT, predict(mod3)), col="blue", lwd=3)
lines(smooth.spline(AOT, predict(mod3)), col="green", lwd=3)
lines(smooth.spline(AOT, predict(mod2)), col="green", lwd=3)
lines(smooth.spline(AOT, predict(mod1)), col="green", lwd=3)
abline(mod1, lwd=3, col="red")
mod3 <- lm(BF~AOT + I(AOT^2) + I(AOT^3))
summary(mod3)
summary(mod1)
summary(mod2)
summary(mod3)
lines(smooth.spline(AOT, predict(mod3)), col="blue", lwd=3)
legend(46, 15, legend = c("mod1: linear","mod2: x^2","mod3: x^3"),
col=c("red","green","blue"), lty=c(1,2,3), lwd=2, bty="n", cex=0.9))
legend(46, 15, legend = c("mod1: linear","mod2: x^2","mod3: x^3"),
col=c("red","green","blue"), lty=c(1,2,3), lwd=2, bty="n", cex=0.9)
legend(46, 15, legend = c("mod1: linear","mod2: x^2","mod3: x^3"),
col=c("red","green","blue"), lty=c(1,2,3), lwd=2, bty="n", cex=0.9)
legend(46, 15, legend = c("mod1: linear","mod2: x^2","mod3: x^3"),
col=c("red","green","blue"), lty=c(1,2,3), lwd=2, bty="n", cex=0.9)
legend(46, 15, legend = c("mod1: linear","mod2: x^2","mod3: x^3"), col=c("red","green","blue"), lty=c(1,2,3), lwd=2, bty="n", cex=0.9)
legend(46, 15, legend = c("mod1: linear","mod2: x^2","mod3: x^3"), col=c("red","green","blue"), lty=c(1,2,3), lwd=3, bty="n", cex=0.9)
legend(56, 35, legend = c("mod1: linear","mod2: x^2","mod3: x^3"), col=c("red","green","blue"), lty=c(1,2,3), lwd=3, bty="n", cex=0.9)
plot(BF~AOT, data=hbf.df)
lines(smooth.spline(AOT, predict(mod1)), col="red", lwd=2)
lines(smooth.spline(AOT, predict(mod2)), col="green", lwd=2)
lines(smooth.spline(AOT, predict(mod3)), col="blue", lwd=2)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(x, y)
legend(350, 86, legend = c("mod1: linear","mod2: x^2","mod3: x^3"), col=c("red","green","blue"), lty=c(1,2,3), lwd=3, bty="n", cex=0.9)
legend(330, 88, legend = c("mod1: linear","mod2: x^2","mod3: x^3"), col=c("red","green","blue"), lty=c(1,2,3), lwd=3, bty="n", cex=0.9)
# Scatter plot
plot(BF~AOT, data=hbf.df)
# Polynomial models
mod1 <- lm(BF~AOT)
mod2 <- lm(BF~poly(AOT, degree=2, raw=T))
mod3 <- lm(BF~AOT + I(AOT^2) + I(AOT^3))
lines(smooth.spline(AOT, predict(mod1)), col="red", lwd=2, lty=1)
lines(smooth.spline(AOT, predict(mod2)), col="green", lwd=2, lty=2)
lines(smooth.spline(AOT, predict(mod3)), col="blue", lwd=2, lty=3)
legend(330, 88, legend = c("mod1: linear","mod2: x^2","mod3: x^3"), col=c("red","green","blue"), lty=c(1,2,3), lwd=3, bty="n", cex=0.9)
summary(mod1)
summary(mod2)
summary(mod3)
mod2 <- lm(BF~AOT + I(AOT^2))
summary(mod1)
summary(mod2)
summary(mod3)
anova(mod1, mod2)
anova(mod2, mod3)
# Alternative method. Keep adding terms until a non-significant result
mod.1 <- lm(BF~AOT)
anova(mod.1)
mod.2 <- update(mod.1, .~. + I(AOT^2))
anova(mod.2)
mod.3 <- update(mod.2, .~. + I(AOT^3))
anova(mod.3)
mod.4 <- update(mod.3, .~. + I(AOT^4))
anova(mod.4)
anova(mod3)
plot(mod2)
plot(mod2, which=2:2)
plot(mod2, which=1:2)
View(mod.1)
par(mfrow=c(2:2))
plot(mod2, which=2:2)
par(mfrow=c(2,2))
plot(mod2, which=2:2)
legend(330, 88, legend = c("mod1: linear","mod2: x^2","mod3: x^3"), col=c("red","green","blue"), lty=c(1,2,3), lwd=3, bty="n", cex=0.9)
# Check the differences between them.
anova(mod1, mod2)
par(mfrow=c(1,2))
plot(mod2, which=1:2)
par(mfrow=c(1,2))
plot(mod2, which=2:2)
par(mfrow=c(1,2))
plot(mod2, which=2:2, add.smooth=FALSE)
par(mfrow=c(2,2))
plot(mod2, which=2:2, add.smooth=FALSE)
par(mfrow=c(2,2))
plot(mod2, which=c(1:2), add.smooth=FALSE)
plot(mod2, which=c(1:2:3), add.smooth=FALSE)
plot(mod2, which=c(1,2,3,4), add.smooth=FALSE)
par(mfrow=c(2,2))
plot(mod2, which=c(1,2,3,4), add.smooth=FALSE)
plot(mod2, which=c(1,2,3,4))
plot(mod2, which=c(1,2,3,5))
plot(mod2, which=c(1,2,3,6))
plot(mod2, which=c(1,2,3,7))
plot(mod2, which=c(1,2,3,5))
plot(mod2, which=c(1,2,3,4,5))
plot(mod2, which=c(1,2,3,4,5))
plot(mod2, which=c(1,2,3,4,5))
plot(mod2, which=c(1,2,3,4,5))
par(mfrow=c(2,2))
plot(mod2, which=c(1,2,4,5))
plot(mod2, which=c(1,2,4,5,3,6))
plot(mod2, which=c(1,2,4,5))
par(mfrow=c(2,2))
plot(mod2, which=c(1,2,4,5))
par(mfrow=c(2,2))
plot(mod2, which=c(1,2))
par(mfrow=c(1,2))
plot(mod2, which=c(1,2))
par(mfrow=c(2,2))
plot(mod2, which=c(1,2))
par(mfrow=c(1,2))
plot(mod2, which=c(1,2))
plot(mod2, which=c(5))
plot(mod2, which=c(4))
plot(mod2, which=c(3))
plot(mod2, which=c(4))
plot(mod2, which=c(5))
plot(mod2, which=c(6))
plot(mod2, which=c(7))
# Residuals vs fitted and normal qq
par(mfrow=c(2,2))
plot(mod2, which=c(1,2,3))
# Residuals vs fitted and normal qq
par(mfrow=c(1,2))
plot(mod2, which=c(4))
plot(mod2, which=c(5))
plot(mod2, which=c(6))
plot(mod2, which=c(5))
plot(mod2, which=c(1))
plot(mod2, which=c(5))
library(ggplot2)
# Now visualise the data using boxplot.
plot(Ants~Filling, data=sandwich.df)
# Scatter plot
plot(BF~AOT, data=hbf.df)
# Residuals vs fitted and normal qq
par(mfrow=c(1,1))
# Scatter plot
plot(BF~AOT, data=hbf.df)
ggplot(data=mod2, aes(x=AOT, y=BF)) + geom_point(pch=17, col="blue", size=2)+
geom_smooth(method = "lm", formula = y ~ poly(x, 4), col="red", Linetype=2)+
labs(title="Quadratic polynomial with 95% confidence bands")
ggplot(data=mod2, aes(x=AOT, y=BF)) + geom_point(pch=17, col="blue", size=2)+
geom_smooth(method = "lm", formula = y ~ poly(x, 4), col="red", linetype=2)+
labs(title="Quadratic polynomial with 95% confidence bands")
options(digits=3, show.signif.stars = F)
source("Rfunctions.R")
summary(mod2)
plot(mod2, which=c(1,2,3,4))
plot(mod2, which=c(1,2,3,4))
# Residuals vs fitted and normal qq
par(mfrow=c(2,2))
plot(mod2, which=c(1,2,3,4))
plot(mod2, which=c(1,2,3,5))
