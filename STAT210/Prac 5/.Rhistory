options(digits=3,show.signif.stars=F)
source("Rfunctions.R")
source("Rfunctions.R")
coral.df <- read.table("coral.txt",header=TRUE)
# Plot the data - produce an exploratory plot.
attach(coral.df)
plot(temperature,bleach,xlab="Water temperature",ylab="Probability of bleaching event")
mod.glm <- glm(bleach~temperature,family=binomial,coral.df)
anova(mod.glm, test="Chisq")
anova(..., test="Chisq")
...
anova(mod.glm, test="Chisq")
# And then inserting the correct values for (i) residual deviance and (ii) df into the R command below.
# You'll need to find these missing values in the output from the previous command.
1 - pchisq(18.8, df = 18)
# Now let's look at the regression coefficients
summary(mod.glm)
# And find the confidence intervals for these coefficients
betaCI(mod.glm)
# Predict the probability of coral bleaching when temperature = 30 C
predict(mod.glm, newdata = data.frame(temperature = 30), type="response")
# Add smooth curve
curve(predict(mod.glm,data.frame(temperature=x),type="response"),add=TRUE)
# add predicted (fitted) values
points(temperature,mod.glm$fitted,pch=20)
options(digits=3,show.signif.stars=F)
source("Rfunctions.R")
# Access the dataset from a web location
UCLAadm <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
# View the first six rows of your dataframe so you know what it looks like.
head(UCLAadm)
View(UCLAadm)
# One of the qualitative predictors needs to be declared as a factor
# Convert that variable  to a factor.
# In the code below you need to replace ... with the name of your dataframe.
# and replace xxx with the name of the variable
UCLAadm$rank <- factor(UCLAadm$rank)
attach(UCLAadm)
# Plot the data - in this case for gre.
plot(gre,admit, xlab="gre",ylab="Probability of admission")
gre.glm=glm(admit~gre,family=binomial,UCLAadm)
curve(predict(gre.glm,data.frame(gre=x),type="resp"),add=TRUE)
points(gre,fitted(gre.glm),pch=20)
# Access the dataset from a web location
UCLAadm <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
# View the first six rows of your dataframe so you know what it looks like.
head(UCLAadm)
# One of the qualitative predictors needs to be declared as a factor
# Convert that variable  to a factor.
# In the code below you need to replace ... with the name of your dataframe.
# and replace xxx with the name of the variable
UCLAadm$gre <- factor(UCLAadm$gre)
attach(UCLAadm)
# Plot the data - in this case for gre.
plot(gre,admit, xlab="gre",ylab="Probability of admission")
gre.glm=glm(admit~gre,family=binomial,UCLAadm)
curve(predict(gre.glm,data.frame(gre=x),type="resp"),add=TRUE)
# Access the dataset from a web location
UCLAadm <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
# View the first six rows of your dataframe so you know what it looks like.
head(UCLAadm)
# One of the qualitative predictors needs to be declared as a factor
# Convert that variable  to a factor.
# In the code below you need to replace ... with the name of your dataframe.
# and replace xxx with the name of the variable
UCLAadm$rank <- factor(UCLAadm$rank)
attach(UCLAadm)
# Plot the data - in this case for gre.
plot(gre,admit, xlab="gre",ylab="Probability of admission")
gre.glm=glm(admit~gre,family=binomial,UCLAadm)
curve(predict(gre.glm,data.frame(gre=x),type="resp"),add=TRUE)
points(gre,fitted(gre.glm),pch=20)
plot(gpa,admit,xlab="gpa",ylab="Probability of admission")
gra.glm=glm(admi~gpa,family=binomial,UCLAadm)
gra.glm=glm(admit~gpa,family=binomial,UCLAadm)
gpa.glm=glm(admit~gpa,family=binomial,UCLAadm)
curve(predict(gpa.glm,data.frame(gpa=x),type="resp"),add=TRUE)
points(gre.fitted(gre.glm),pch=20)
points(gpa.fitted(gre.glm),pch=20)
points(gpa.fitted(gpa.glm),pch=20)
points(gpa,fitted(gpa.glm),pch=20)
# Access the dataset from a web location
UCLAadm <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
# One of the qualitative predictors needs to be declared as a factor
# Convert that variable  to a factor.
# In the code below you need to replace ... with the name of your dataframe.
# and replace xxx with the name of the variable
UCLAadm$admit <- factor(UCLAadm$admit)
attach(UCLAadm)
# Plot the data - in this case for gre.
plot(gre,admit, xlab="gre",ylab="Probability of admission")
gre.glm=glm(admit~gre,family=binomial,UCLAadm)
curve(predict(gre.glm,data.frame(gre=x),type="resp"),add=TRUE)
points(gre,fitted(gre.glm),pch=20)
# Access the dataset from a web location
UCLAadm <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
# One of the qualitative predictors needs to be declared as a factor
# Convert that variable  to a factor.
# In the code below you need to replace ... with the name of your dataframe.
# and replace xxx with the name of the variable
UCLAadm$rank <- factor(UCLAadm$rank)
attach(UCLAadm)
attach(UCLAadm)
# Plot the data - in this case for gre.
plot(gre,admit, xlab="gre",ylab="Probability of admission")
attach(UCLAadm)
attach(UCLAadm)
# Plot the data - in this case for gre.
plot(gre,admit, xlab="gre",ylab="Probability of admission")
gre.glm=glm(admit~gre,family=binomial,UCLAadm)
curve(predict(gre.glm,data.frame(gre=x),type="resp"),add=TRUE)
points(gre,fitted(gre.glm),pch=20)
# Access the dataset from a web location
UCLAadm <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
# One of the qualitative predictors needs to be declared as a factor
# Convert that variable  to a factor.
# In the code below you need to replace ... with the name of your dataframe.
# and replace xxx with the name of the variable
UCLAadm$rank <- factor(UCLAadm$rank)
attach(UCLAadm)
# Plot the data - in this case for gre.
plot(gre,admit, xlab="gre",ylab="Probability of admission")
gre.glm=glm(admit~gre,family=binomial,UCLAadm)
curve(predict(gre.glm,data.frame(gre=x),type="resp"),add=TRUE)
points(gre,fitted(gre.glm),pch=20)
plot(gpa,admit,xlab="gpa",ylab="Probability of admission")
gpa.glm=glm(admit~gpa,family=binomial,UCLAadm)
curve(predict(gpa.glm,data.frame(gpa=x),type="resp"),add=TRUE)
points(gpa,fitted(gpa.glm),pch=20)
adm.glm <- glm(admit~gre,gpa,rank, family=binomial)
adm.glm <- glm(admit~gre,gpa,rank, family=binomial,UCLAadm)
adm.glm <- glm(admit~(gre,gpa,rank) family=binomial,UCLAadm)
adm.glm <- glm(admit~(gre,gpa,rank) family=binomial,UCLAadm)
adm.glm <- glm(admit~(gre,gpa,rank), family=binomial,UCLAadm)
adm.glm <- glm(admit~gre*gpa*rank, family=binomial,UCLAadm)
anova(adm.glm,test="chisq")
anova(adm.glm, test="Chisq")
pchisq(450,384)
1-pchisq(450,384)
summary(adm.glm)
pchisq(450,df=384)
summary(adm.glm)
adm.glm <- glm(admit~gre+gpa+rank, family=binomial,UCLAadm)
anova(adm.glm, test="Chisq")
pchisq(459,df=384)
1-pchisq(459,df=384)
summary(adm.glm)
# Calculate odds ratios and CIs
exp(cbind(OR = coef(adm.glm), confint(adm.glm)))
####################################################################
#### Only if you've got time (or can perhaps explore later ...)
###################################################################
# Set up a data frame containing the values you want for the independent variables
newdata <- data.frame(
gre = rep(seq(from = 200, to = 800, length.out = 100), 4 * 4),
gpa = rep(c(2.5, 3, 3.5, 4), each = 100 * 4),
rank = factor(rep(rep(1:4, each = 100), 4)))
# Predict the probabilities for our input data as well as their standard errors.
#Remember to adjust the name of the model as appropriate.
newdata[, c("p", "se")] <- predict(a, newdata,
type = "response", se.fit=TRUE)[-3]
# Predict the probabilities for our input data as well as their standard errors.
#Remember to adjust the name of the model as appropriate.
newdata[, c("p", "se")] <- predict(8, newdata,
type = "response", se.fit=TRUE)[-3]
# Predict the probabilities for our input data as well as their standard errors.
#Remember to adjust the name of the model as appropriate.
newdata[, c("p", "se")] <- predict(a, newdata,
type = "response", se.fit=TRUE)[-3]
# Predict the probabilities for our input data as well as their standard errors.
#Remember to adjust the name of the model as appropriate.
newdata[, c("p", "se")] <- predict(adm.glm, newdata,
type = "response", se.fit=TRUE)[-3]
# Load ggplot2
library(ggplot2)
ggplot(newdata, aes(x = gre, y = p, colour = rank)) +
geom_line() +
facet_wrap(~gpa)
View(mod.glm)
View(gre.glm)
View(UCLAadm)
plot(temperature,bleach,xlab="Water temperature",ylab="Probability of bleaching event")
options(digits=3,show.signif.stars=F)
source("Rfunctions.R")
coral.df <- read.table("coral.txt",header=TRUE)
# Plot the data - produce an exploratory plot.
attach(coral.df)
plot(temperature,bleach,xlab="Water temperature",ylab="Probability of bleaching event")
mod.glm <- glm(bleach~temperature,family=binomial,coral.df)
anova(mod.glm, test="Chisq")
# And then inserting the correct values for (i) residual deviance and (ii) df into the R command below.
# You'll need to find these missing values in the output from the previous command.
1 - pchisq(18.8, df = 18)
# Now let's look at the regression coefficients
summary(mod.glm)
# And find the confidence intervals for these coefficients
betaCI(mod.glm)
# Predict the probability of coral bleaching when temperature = 30 C
predict(mod.glm, newdata = data.frame(temperature = 30), type="response")
# Add smooth curve
curve(predict(mod.glm,data.frame(temperature=x),type="response"),add=TRUE)
